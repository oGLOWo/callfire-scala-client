<?xml version="1.0" encoding="UTF-8"?><!--callfire-service.wsdl, 1.1-->
<definitions xmlns="http://schemas.xmlsoap.org/wsdl/" xmlns:tns="http://api.callfire.com/service/wsdl"
             xmlns:svc="http://api.callfire.com/service/xsd" xmlns:data="http://api.callfire.com/data"
             xmlns:ann="http://api.callfire.com/annotations" targetNamespace="http://api.callfire.com/service/wsdl">
    <jaxws:bindings xmlns:jaxws="http://java.sun.com/xml/ns/jaxws">
        <jaxws:enableWrapperStyle>false</jaxws:enableWrapperStyle>
    </jaxws:bindings>
    <types>
        <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">
            <xs:import namespace="http://api.callfire.com/service/xsd" schemaLocation="callfire-service.xsd"/>
        </xs:schema>
    </types>
    <message name="CreatedId">
        <part element="svc:CreatedId" name="Id"/>
    </message>
    <message name="ServiceFault">
        <part element="svc:ServiceFaultInfo" name="Fault"/>
    </message>
    <message name="Empty"/>
    <!-- Broadcast Service -->
    <message name="GetBroadcast">
        <part element="svc:GetBroadcast" name="Request"/>
    </message>
    <message name="Broadcast">
        <part element="data:Broadcast" name="Broadcast"/>
    </message>
    <message name="QueryBroadcasts">
        <part element="svc:QueryBroadcasts" name="Query"/>
    </message>
    <message name="BroadcastQueryResult">
        <part element="svc:BroadcastQueryResult" name="Response"/>
    </message>
    <message name="GetBroadcastStats">
        <part element="svc:GetBroadcastStats" name="Request"/>
    </message>
    <message name="BroadcastStats">
        <part element="data:BroadcastStats" name="BroadcastStats"/>
    </message>
    <message name="CreateBroadcast">
        <part element="svc:CreateBroadcast" name="Create"/>
    </message>
    <message name="UpdateBroadcast">
        <part element="svc:UpdateBroadcast" name="Update"/>
    </message>
    <message name="ControlBroadcast">
        <part element="svc:ControlBroadcast" name="Control"/>
    </message>
    <message name="GetContactBatch">
        <part element="svc:GetContactBatch" name="Request"/>
    </message>
    <message name="ContactBatch">
        <part element="data:ContactBatch" name="Batch"/>
    </message>
    <message name="QueryContactBatches">
        <part element="svc:QueryContactBatches" name="Query"/>
    </message>
    <message name="ContactBatches">
        <part element="svc:ContactBatchQueryResult" name="Response"/>
    </message>
    <message name="CreateContactBatch">
        <part element="svc:CreateContactBatch" name="Create"/>
    </message>
    <message name="ControlContactBatch">
        <part element="svc:ControlContactBatch" name="Update"/>
    </message>
    <message name="GetBroadcastSchedule">
        <part element="svc:GetBroadcastSchedule" name="Request"/>
    </message>
    <message name="BroadcastSchedule">
        <part element="data:BroadcastSchedule" name="Schedule"/>
    </message>
    <message name="QueryBroadcastSchedules">
        <part element="svc:QueryBroadcastSchedules" name="Query"/>
    </message>
    <message name="BroadcastSchedules">
        <part element="svc:BroadcastScheduleQueryResult" name="Response"/>
    </message>
    <message name="CreateBroadcastSchedule">
        <part element="svc:CreateBroadcastSchedule" name="Create"/>
    </message>
    <message name="DeleteBroadcastSchedule">
        <part element="svc:DeleteBroadcastSchedule" name="Delete"/>
    </message>
    <portType name="BroadcastServicePortType">
        <documentation>
            <ann:restOperation path="broadcast"/>
            <ann:summary>Operations for creating and managing outbound call and texts broadcasts.</ann:summary>
            <ann:description>&lt;p&gt; A Broadcast consists of a configuration for the outbound call or text experience,
                a set of recipient contacts organized into contact batches, and an optional schedule of dates and times
                at which the broadcast should automatically start and stop. &lt;/p&gt; &lt;p&gt; The Call Service and
                Text Service provide convenience methods that encapsulate the creation, population and starting of
                broadcasts. The Broadcast Service is only required for advanced use cases involving delayed or scheduled
                starts, multiple contact batches, or changing configurations over time. &lt;/p&gt;</ann:description>
            <ann:link>https://www.callfire.com/help/docs/voice-broadcast</ann:link>
            <ann:link>https://www.callfire.com/help/docs/text-broadcast</ann:link>
        </documentation>
        <operation name="CreateBroadcast">
            <documentation>
                <ann:summary>Creates a new Broadcast</ann:summary>
                <ann:description>&lt;p&gt;This operation creates a Broadcast campaign and returns a broadcastId. To see
                    the status of this campaign call &lt;code&gt;GetBroadcast&lt;/code&gt; with the returned
                    broadcastId. &lt;/p&gt; &lt;p&gt;There are 3 types of Broadcast: TEXT, IVR, or VOICE. Select the
                    appropriate config to match the broadcast type, TextBroadcastConfig, IvrBroadcastConfig, or
                    VoiceBroadcastConfig. Prefer the Text Service operations (ex: &lt;code&gt;SendText&lt;/code&gt;) and
                    Call Service operations (ex: &lt;code&gt;SendCall&lt;/code&gt;) over this operation when managing
                    simple text and call campaigns since those operations are simpler and more concise.
                    &lt;/p&gt;</ann:description>
                <ann:link>https://www.callfire.com/help/docs/voice-broadcast/creating-campaign</ann:link>
                <ann:link>https://www.callfire.com/help/docs/text-broadcast/creating-campaign</ann:link>
            </documentation>
            <input message="tns:CreateBroadcast" name="CreateBroadcast"/>
            <output message="tns:CreatedId" name="BroadcastId"/>
            <fault message="tns:ServiceFault" name="Fault"/>
        </operation>
        <operation name="QueryBroadcasts">
            <documentation>
                <ann:summary>Lists existing Broadcasts</ann:summary>
                <ann:description>&lt;p&gt;Use this operation to see the status of Broadcasts in account. Filter by type
                    of campaign whether currently running. Returns a list of Broadcast info such as campaign name, type,
                    status, ect... &lt;/p&gt;</ann:description>
            </documentation>
            <input message="tns:QueryBroadcasts" name="QueryBroadcasts"/>
            <output message="tns:BroadcastQueryResult" name="BroadcastQueryResult"/>
            <fault message="tns:ServiceFault" name="Fault"/>
        </operation>
        <operation name="GetBroadcast">
            <documentation>
                <ann:restOperation path="{Id}"/>
                <ann:summary>Gets a single Broadcast by ID</ann:summary>
                <ann:description>&lt;p&gt;Use ID returned from &lt;code&gt;CreateBroadcast&lt;/code&gt; or from &lt;code&gt;QueryBroadcast&lt;/code&gt;
                    to retreive information on indivual Broadcast. Include info such as campaign name, type, status,
                    ect... &lt;/p&gt;</ann:description>
            </documentation>
            <input message="tns:GetBroadcast" name="GetBroadcast"/>
            <output message="tns:Broadcast" name="Broadcast"/>
            <fault message="tns:ServiceFault" name="Fault"/>
        </operation>
        <operation name="UpdateBroadcast">
            <documentation>
                <ann:restOperation path="{Id}"/>
                <ann:summary>Updates an existing Broadcast's configuration</ann:summary>
                <ann:description>&lt;p&gt;Update existing broadcast's configuration such as time zone restrictions or
                    retry logic. Currently all fields from config are updated so the 'Message' field needs to be
                    populated just like in &lt;code&gt;CreateBroadcast&lt;/code&gt; operation. &lt;/p&gt; &lt;p&gt;Use
                    unique ID to specify broadcast. Need to provide dummy 'Name' field Broadcast even though the field
                    will not be overwritten. &lt;/p&gt;</ann:description>
            </documentation>
            <input message="tns:UpdateBroadcast" name="UpdateBroadcast"/>
            <output message="tns:Empty" name="UpdateBroadcastResponse"/>
            <fault message="tns:ServiceFault" name="Fault"/>
        </operation>
        <operation name="GetBroadcastStats">
            <documentation>
                <ann:restOperation path="{Id}/stats"/>
                <ann:summary>Gets performance and result statistics for a Broadcast</ann:summary>
                <ann:description>&lt;p&gt;Get broadcast stats by broadcastId or by interval range. Stats include
                    information like billed amount, billed duration, actions count, attempt count, etc...
                    &lt;/p&gt;</ann:description>
            </documentation>
            <input message="tns:GetBroadcastStats" name="GetBroadcastStats"/>
            <output message="tns:BroadcastStats" name="BroadcastStats"/>
            <fault message="tns:ServiceFault" name="Fault"/>
        </operation>
        <operation name="ControlBroadcast">
            <documentation>
                <ann:restOperation path="{Id}/control"/>
                <ann:summary>Starts, Stops or Archives a Broadcast</ann:summary>
                <ann:description>&lt;p&gt;Apply command START, STOP, or ARCHIVE to Broadcast. Also can change the max
                    active count of Broadcast. &lt;/p&gt;</ann:description>
            </documentation>
            <input message="tns:ControlBroadcast" name="ControlBroadcast"/>
            <output message="tns:Empty" name="ControlBroadcastResponse"/>
            <fault message="tns:ServiceFault" name="Fault"/>
        </operation>
        <operation name="CreateContactBatch">
            <documentation>
                <ann:restOperation path="{Id}/batch"/>
                <ann:summary>Creates a new ContactBatch</ann:summary>
                <ann:description>&lt;p&gt;Contact Batch is a list of contacts to associate with a broadcast. Use this
                    operation to attach a list of contacts to an existing Campaign. A list of ToNumbers or an existing
                    Contact List ID is required to create and attach the Contact List. Returned is the unique
                    contactListId that can be used in &lt;code&gt;ControlContactBatch&lt;/code&gt; to enable or disable
                    this batch. &lt;/p&gt; &lt;p&gt;Attaching an existing Contact List by ID is currently unavailable,
                    coming soon. &lt;/p&gt;</ann:description>
            </documentation>
            <input message="tns:CreateContactBatch" name="CreateContactBatch"/>
            <output message="tns:CreatedId" name="ContactBatchId"/>
            <fault message="tns:ServiceFault" name="Fault"/>
        </operation>
        <operation name="QueryContactBatches">
            <documentation>
                <ann:restOperation path="{Id}/batch"/>
                <ann:summary>Lists a Broadcast's ContactBatch</ann:summary>
                <ann:description>&lt;p&gt;Return list of Contact Batches associated with this Broadcast. The
                    contactBatchIds returned from this campaign can then be used to enable, disable, or delete the
                    individual Batches. &lt;/p&gt;</ann:description>
            </documentation>
            <input message="tns:QueryContactBatches" name="QueryContactBatches"/>
            <output message="tns:ContactBatches" name="ContactBatches"/>
            <fault message="tns:ServiceFault" name="Fault"/>
        </operation>
        <operation name="GetContactBatch">
            <documentation>
                <ann:restOperation path="batch/{Id}"/>
                <ann:summary>Gets a ContactBatch by ID</ann:summary>
                <ann:description>&lt;p&gt;Retrieve info on individual Contact Batch using contactId returned from &lt;code&gt;CreateContactBatch&lt;/code&gt;
                    &lt;/p&gt;</ann:description>
            </documentation>
            <input message="tns:GetContactBatch" name="GetContactBatch"/>
            <output message="tns:ContactBatch" name="ContactBatchResponse"/>
            <fault message="tns:ServiceFault" name="Fault"/>
        </operation>
        <operation name="ControlContactBatch">
            <documentation>
                <ann:restOperation path="batch/{Id}/control"/>
                <ann:summary>Enables or Disables a Broadcast's ContactBatch</ann:summary>
                <ann:description>&lt;p&gt;This operation provides the ability to enable or disable on a Broadcast the
                    list of contacts associated with a ContactBatch. &lt;/p&gt;</ann:description>
            </documentation>
            <input message="tns:ControlContactBatch" name="ControlContactBatch"/>
            <output message="tns:Empty" name="ControlContactBatchResponse"/>
            <fault message="tns:ServiceFault" name="Fault"/>
        </operation>
        <operation name="CreateBroadcastSchedule">
            <documentation>
                <ann:restOperation path="schedule"/>
                <ann:summary>Creates a new Schedule for a Broadcast</ann:summary>
                <ann:description>&lt;p&gt;Broadcast can be set to run at scheduled times a prescribed by
                    BroadcastSchedule. Can pick start time, stop time, begin date, and day of week. Returns
                    broadcastScheduleId that can be used in &lt;code&gt;GetBroadcastSchedule&lt;/code&gt; and &lt;code&gt;DeleteBroadcastSchedule&lt;/code&gt;
                    &lt;/p&gt;</ann:description>
            </documentation>
            <input message="tns:CreateBroadcastSchedule" name="CreateBroadcastSchedule"/>
            <output message="tns:CreatedId" name="BroadcastScheduleId"/>
            <fault message="tns:ServiceFault" name="Fault"/>
        </operation>
        <operation name="QueryBroadcastSchedule">
            <documentation>
                <ann:restOperation path="schedule"/>
                <ann:summary>Lists existing BroadcastSchedules</ann:summary>
                <ann:description>&lt;p&gt;List information about Broadcast Schedules attached to a Broadcast.
                    &lt;/p&gt;</ann:description>
            </documentation>
            <input message="tns:QueryBroadcastSchedules" name="QueryBroadcastSchedule"/>
            <output message="tns:BroadcastSchedules" name="BroadcastSchedules"/>
            <fault message="tns:ServiceFault" name="Fault"/>
        </operation>
        <operation name="GetBroadcastSchedule">
            <documentation>
                <ann:restOperation path="schedule/{Id}"/>
                <ann:summary>Gets a BroadcastSchedule by ID</ann:summary>
                <ann:description>&lt;p&gt;List information about individual Broadcast Schedule attached to a Broadcast.
                    &lt;/p&gt;</ann:description>
            </documentation>
            <input message="tns:GetBroadcastSchedule" name="GetBroadcastSchedule"/>
            <output message="tns:BroadcastSchedule" name="BroadcastScheduleResponse"/>
            <fault message="tns:ServiceFault" name="Fault"/>
        </operation>
        <operation name="DeleteBroadcastSchedule">
            <documentation>
                <ann:restOperation path="schedule/{Id}"/>
                <ann:summary>Deletes a BroadcastSchedule by ID</ann:summary>
                <ann:description>&lt;p&gt;Delete BroadcastSchedule associated with a Broadcast.
                    &lt;/p&gt;</ann:description>
            </documentation>
            <input message="tns:DeleteBroadcastSchedule" name="DeleteBroadcastSchedule"/>
            <output message="tns:Empty" name="DeleteBroadcastServiceResponse"/>
            <fault message="tns:ServiceFault" name="Fault"/>
        </operation>
    </portType>
    <!-- Subscription Service -->
    <message name="GetSubscription">
        <part element="svc:GetSubscription" name="Request"/>
    </message>
    <message name="Subscription">
        <part element="data:Subscription" name="Subscription"/>
    </message>
    <message name="QuerySubscriptions">
        <part element="svc:QuerySubscriptions" name="Request"/>
    </message>
    <message name="SubscriptionQueryResult">
        <part element="svc:SubscriptionQueryResult" name="Response"/>
    </message>
    <message name="CreateSubscription">
        <part element="svc:CreateSubscription" name="Request"/>
    </message>
    <message name="UpdateSubscription">
        <part element="svc:UpdateSubscription" name="Request"/>
    </message>
    <message name="DeleteSubscription">
        <part element="svc:DeleteSubscription" name="Request"/>
    </message>
    <portType name="SubscriptionServicePortType">
        <documentation>
            <ann:restOperation path="subscription"/>
            <ann:summary>Provides operations for creating and managing CallFire subscriptions which listen for account
                events.
            </ann:summary>
            <ann:description>&lt;p&gt; CallFire account events, such as &lt;code&gt;TextSent&lt;/code&gt; or &lt;code&gt;CallFinished&lt;/code&gt;,
                can be listened for (subscribed to) by registering a postback URI endpoint, either an email address or
                web service URL, that CallFire can publish the event info to. Subscription service is used for
                registering and managing these postback URI endpoints. &lt;/p&gt; &lt;p&gt; A typical use case would be
                for determining the status of a &lt;code&gt;SendText&lt;/code&gt; request which is an asynchronous
                operation. The status of the Text can be obtained either by polling the GetText / QueryText operations
                (pull strategy) or more efficiently by registering with Subscription Service a postback internet
                endpoint URL for receiving 'textsent' and 'textfinished' events to. &lt;/p&gt; &lt;p&gt; Currently
                supports TextSent, TextFinished, CallFinished, and CampaignFinished events. &lt;/p&gt;</ann:description>
            <ann:link>https://www.callfire.com/api-documentation/postback-guide</ann:link>
        </documentation>
        <operation name="CreateSubscription">
            <documentation>
                <ann:summary>Creates a new subscription for CallFire event notifications</ann:summary>
                <ann:description>&lt;p&gt;&lt;code&gt;CreateSubscription&lt;/code&gt; registers a URI endpoint to start
                    receiving CallFire notification events on. Returned is the subscriptionId that can be used later to
                    query, update, or delete the subscription. The subscriptionId is also returned as part of all
                    notification events as 'subscriptionId'. &lt;/p&gt; &lt;p&gt;A URI endpoint will need to be provided
                    that can handle the HTTP notification events coming from CallFire.com. &lt;/p&gt;</ann:description>
            </documentation>
            <input message="tns:CreateSubscription" name="Create"/>
            <output message="tns:CreatedId" name="SubscriptionId"/>
            <fault message="tns:ServiceFault" name="Fault"/>
        </operation>
        <operation name="QuerySubscriptions">
            <documentation>
                <ann:summary>Get a list of registered subscriptions</ann:summary>
                <ann:description>&lt;p&gt;Return a list of all subscriptions registered to an account. Subscriptions
                    returned contain info like id, enabled, endpoint, filter, etc... &lt;/p&gt;</ann:description>
            </documentation>
            <input message="tns:QuerySubscriptions" name="QuerySubscriptions"/>
            <output message="tns:SubscriptionQueryResult" name="SubscriptionQueryResult"/>
            <fault message="tns:ServiceFault" name="Fault"/>
        </operation>
        <operation name="GetSubscription">
            <documentation>
                <ann:restOperation path="{Id}"/>
                <ann:summary>Gets an existing individual subscription by ID</ann:summary>
                <ann:description>&lt;p&gt;Return a subscription registered to an account using subscriptionId returned
                    from &lt;code&gt;CreateSubscription&lt;/code&gt; request. Subscription returned contain info like
                    id, enabled, endpoint, filter, etc... &lt;/p&gt;</ann:description>
            </documentation>
            <input message="tns:GetSubscription" name="GetSubscription"/>
            <output message="tns:Subscription" name="Response"/>
            <fault message="tns:ServiceFault" name="Fault"/>
        </operation>
        <operation name="UpdateSubscription">
            <documentation>
                <ann:restOperation path="{Id}"/>
                <ann:summary>Updates an existing subscription</ann:summary>
                <ann:description>&lt;p&gt;Update existing subscription by ID&lt;/p&gt; &lt;p&gt;Use this to enable or
                    disable notification events, change the notification endpoint URI, or change the filtering so only
                    receive notification for a subset of events. &lt;/p&gt; &lt;p&gt;UpdateSubscription service call
                    returns no response.&lt;/p&gt;</ann:description>
            </documentation>
            <input message="tns:UpdateSubscription" name="UpdateSubscription"/>
            <output message="tns:Empty" name="UpdateSubscriptionResponse"/>
            <fault message="tns:ServiceFault" name="Fault"/>
        </operation>
        <operation name="DeleteSubscription">
            <documentation>
                <ann:restOperation path="{Id}"/>
                <ann:summary>Deletes a subscription by ID</ann:summary>
                <ann:description>&lt;p&gt;Delete subscription to stop receiving CallFire notification events at the
                    registered URI postback endpoint. &lt;/p&gt;</ann:description>
            </documentation>
            <input message="tns:DeleteSubscription" name="DeleteSubscription"/>
            <output message="tns:Empty" name="DeleteSubscriptionResponse"/>
            <fault message="tns:ServiceFault" name="Fault"/>
        </operation>
    </portType>
    <!-- Text Service -->
    <message name="SendText">
        <part element="svc:SendText" name="Request"/>
    </message>
    <message name="GetText">
        <part element="svc:GetText" name="Request"/>
    </message>
    <message name="Text">
        <part element="data:Text" name="Text"/>
    </message>
    <message name="QueryTexts">
        <part element="svc:QueryTexts" name="Request"/>
    </message>
    <message name="TextQueryResult">
        <part element="svc:TextQueryResult" name="Response"/>
    </message>
    <message name="GetAutoReply">
        <part element="svc:GetAutoReply" name="Request"/>
    </message>
    <message name="AutoReply">
        <part element="data:AutoReply" name="Response"/>
    </message>
    <message name="QueryAutoReplies">
        <part element="svc:QueryAutoReplies" name="Request"/>
    </message>
    <message name="AutoReplyQueryResult">
        <part element="svc:AutoReplyQueryResult" name="Response"/>
    </message>
    <message name="CreateAutoReply">
        <part element="svc:CreateAutoReply" name="Request"/>
    </message>
    <message name="DeleteAutoReply">
        <part element="svc:DeleteAutoReply" name="Request"/>
    </message>
    <portType name="TextServicePortType">
        <documentation>
            <ann:restOperation path="text"/>
            <ann:summary>Sending and receiving text messages and managing auto-replies</ann:summary>
            <ann:description>&lt;p&gt;Operations for sending and receiving text messages and managing auto-replies &lt;a
                href="https://www.callfire.com/api-documentation/text-broadcast-guide"&gt;Text Broadcast Guide&lt;/a&gt;
                The operations defined here should be preferred over BroadcastService methods when appropriate since the
                &lt;code&gt;TextService&lt;/code&gt; operations are more consise and selective in the input parameters.
                &lt;/p&gt;</ann:description>
            <ann:link>https://www.callfire.com/help/docs/text-broadcast</ann:link>
        </documentation>
        <operation name="SendText">
            <documentation>
                <ann:restOperation method="POST"/>
                <ann:summary>Send text message and return broadcastId</ann:summary>
                <ann:description>&lt;p&gt;Sending a text message requires at least a toNumber and a message. &lt;code&gt;SendText&lt;/code&gt;
                    starts a text campaign and returns the broadcastId if campaign is successful started. This returned
                    broadcastId can be passed to &lt;code&gt;QueryTexts&lt;/code&gt; to get state of text messages in
                    campaign and get list of individual textId for use in &lt;code&gt;GetText&lt;/code&gt; calls. The
                    broadcastId can also be passed to &lt;code&gt;GetBroadcastStats&lt;/code&gt; to get information
                    about the text campaign, such as BilledAmount, Duration, State, etc... &lt;/p&gt; &lt;p&gt;The
                    industry standard is for text messages to be limited to 160 characters or less. If the message is
                    over 160 characters then a &lt;code&gt;BigMessageStrategy&lt;/code&gt; should be selected in the
                    &lt;code&gt;TextBroadcastConfig&lt;/code&gt;. &lt;/p&gt;</ann:description>
                <ann:link>https://www.callfire.com/help/docs/text-broadcast</ann:link>
            </documentation>
            <input message="tns:SendText" name="SendText"/>
            <output message="tns:CreatedId" name="BroadcastId"/>
            <fault message="tns:ServiceFault" name="Fault"/>
        </operation>
        <operation name="QueryTexts">
            <documentation>
                <ann:summary>List sent and received text messages</ann:summary>
                <ann:description>&lt;p&gt;Query for text messages using standard ActionQuery which filters on batchId,
                    broadcastId, toNumber, etc... Returns a list of text messages and all associated info. See &lt;code&gt;GetText&lt;/code&gt;
                    to return just a single text action by id. &lt;/p&gt;</ann:description>
                <ann:link>https://www.callfire.com/help/docs/text-broadcast</ann:link>
            </documentation>
            <input message="tns:QueryTexts" name="QueryTexts"/>
            <output message="tns:TextQueryResult" name="TextQueryResult"/>
            <fault message="tns:ServiceFault" name="Fault"/>
        </operation>
        <operation name="GetText">
            <documentation>
                <ann:restOperation path="{Id}"/>
                <ann:summary>Gets a text message by ID</ann:summary>
                <ann:description>&lt;p&gt;Return individual text message. See &lt;code&gt;QueryTexts&lt;/code&gt; to
                    return a list of text messages and determine individual textIds. &lt;/p&gt; &lt;p&gt;General usage
                    is to start a text campaign using &lt;code&gt;SendText&lt;/code&gt;, then to pass returned
                    broadcastId to &lt;code&gt;QueryTexts&lt;/code&gt; to determine textIds of text messages created.
                    This &lt;code&gt;GetText&lt;/code&gt; can then be called with unique textId to determine info and
                    state of text message. &lt;/p&gt;</ann:description>
                <ann:link>https://www.callfire.com/help/docs/text-broadcast</ann:link>
            </documentation>
            <input message="tns:GetText" name="GetText"/>
            <output message="tns:Text" name="Text"/>
            <fault message="tns:ServiceFault" name="Fault"/>
        </operation>
        <!-- inbound configuration -->
        <operation name="CreateAutoReply">
            <documentation>
                <ann:docGeneration hideDoc="true"/>
                <ann:restOperation path="auto-reply"/>
                <ann:summary>Configures a new auto-reply</ann:summary>
                <ann:description>&lt;p&gt;Operation Not Implemented, Comming Soon.&lt;/p&gt; &lt;p&gt;Auto-Replys are
                    text message replys sent to a customer when a customer replys to a text message from a campaign. A
                    keyword will need to have been purchased before an Auto-Reply can be created.
                    &lt;/p&gt;</ann:description>
                <ann:link>https://www.callfire.com/help/docs/keywords/setting-auto-reply</ann:link>
            </documentation>
            <input message="tns:CreateAutoReply" name="CreateAutoReply"/>
            <output message="tns:CreatedId" name="AutoReplyId"/>
            <fault message="tns:ServiceFault" name="Fault"/>
        </operation>
        <operation name="QueryAutoReplies">
            <documentation>
                <ann:docGeneration hideDoc="true"/>
                <ann:restOperation path="auto-reply"/>
                <ann:summary>Lists configured auto-replies</ann:summary>
                <ann:description>Operation Not Implemented, Coming Soon.</ann:description>
            </documentation>
            <input message="tns:QueryAutoReplies" name="QueryAutoReplies"/>
            <output message="tns:AutoReplyQueryResult" name="AutoReplyQueryResult"/>
            <fault message="tns:ServiceFault" name="Fault"/>
        </operation>
        <operation name="GetAutoReply">
            <documentation>
                <ann:docGeneration hideDoc="true"/>
                <ann:restOperation path="auto-reply/{Id}"/>
                <ann:summary>Gets an auto-reply by ID</ann:summary>
                <ann:description>Operation Not Implemented, Coming Soon.</ann:description>
            </documentation>
            <input message="tns:GetAutoReply" name="GetAutoReply"/>
            <output message="tns:AutoReply" name="AutoReply"/>
            <fault message="tns:ServiceFault" name="Fault"/>
        </operation>
        <operation name="DeleteAutoReply">
            <documentation>
                <ann:docGeneration hideDoc="true"/>
                <ann:restOperation path="auto-reply/{Id}"/>
                <ann:summary>Deletes an auto-reply by ID</ann:summary>
                <ann:description>Operation Not Implemented, Coming Soon.</ann:description>
                <ann:link>https://www.callfire.com/help/docs/keywords/providing-opt-out</ann:link>
            </documentation>
            <input message="tns:DeleteAutoReply" name="Request"/>
            <output message="tns:Empty" name="Empty"/>
            <fault message="tns:ServiceFault" name="Fault"/>
        </operation>
    </portType>
    <message name="SendCall">
        <part element="svc:SendCall" name="Request"/>
    </message>
    <message name="GetCall">
        <part element="svc:GetCall" name="Request"/>
    </message>
    <message name="Call">
        <part element="data:Call" name="Call"/>
    </message>
    <message name="QueryCalls">
        <part element="svc:QueryCalls" name="Request"/>
    </message>
    <message name="CallQueryResult">
        <part element="svc:CallQueryResult" name="Response"/>
    </message>
    <message name="CreateSound">
        <part element="svc:CreateSound" name="Create"/>
    </message>
    <message name="GetSoundMeta">
        <part element="svc:GetSoundMeta" name="Request"/>
    </message>
    <message name="SoundMeta">
        <part element="data:SoundMeta" name="Meta"/>
    </message>
    <message name="QuerySoundMeta">
        <part element="svc:QuerySoundMeta" name="Request"/>
    </message>
    <message name="SoundMetaQueryResult">
        <part element="svc:SoundMetaQueryResult" name="Meta"/>
    </message>
    <message name="GetSoundData">
        <part element="svc:GetSoundData" name="Get"/>
    </message>
    <message name="SoundData">
        <part element="svc:SoundData" name="Data"/>
    </message>
    <message name="GetRecordingData">
        <part element="svc:GetRecordingData" name="Get"/>
    </message>
    <message name="RecordingData">
        <part element="svc:RecordingData" name="Data"/>
    </message>
    <portType name="CallServicePortType">
        <documentation>
            <ann:restOperation path="call"/>
            <ann:summary>Provides operations for sending calls, viewing their results, and managing sound files
            </ann:summary>
            <ann:description>&lt;p&gt;Operations for sending and receiving calls, uploading IVRs, and managing sound
                files. &lt;a href="https://www.callfire.com/api-documentation/voice-broadcast-guide"&gt;Broadcast Guide&lt;/a&gt;
                The operations defined here should be preferred over BroadcastService methods when appropriate since the
                &lt;code&gt;CallService&lt;/code&gt; operations are more consise and selective in the input parameters.
                &lt;/p&gt;</ann:description>
            <ann:link>https://www.callfire.com/api-documentation/voice-broadcast-guide</ann:link>
            <ann:link>https://www.callfire.com/help/docs/interactive-voice-response-ivr</ann:link>
        </documentation>
        <operation name="SendCall">
            <documentation>
                <ann:restOperation method="POST"/>
                <ann:summary>Creates a call broadcast, adds numbers to it, and sends it immediately</ann:summary>
                <ann:description>&lt;p&gt;Start sending calls using &lt;code&gt;VoiceBroadcastConfig&lt;/code&gt; or by
                    setting up an IVR using &lt;code&gt;IvrBroadcastConfig&lt;/code&gt;. Sending a call requires at
                    least a ToNumber and sound id or an IVR. The returned broadcastId can be passed to &lt;code&gt;QueryCalls&lt;/code&gt;
                    to get state of call actions in campaign and get list of individual callIds for use in &lt;code&gt;GetCall&lt;/code&gt;
                    request. The broadcastId can also be passed to &lt;code&gt;GetBroadcastStats&lt;/code&gt; to get
                    information about the call campaign, such as BilledAmount, Duration, State, etc...
                    &lt;/p&gt;</ann:description>
            </documentation>
            <input message="tns:SendCall" name="SendCall"/>
            <output message="tns:CreatedId" name="BroadcastId"/>
            <fault message="tns:ServiceFault" name="Fault"/>
        </operation>
        <operation name="QueryCalls">
            <documentation>
                <ann:summary>Lists inbound and outbound calls</ann:summary>
                <ann:description>&lt;p&gt;Query for calls using standard ActionQuery which filters on batchId,
                    broadcastId, toNumber, etc... Returns a list of calls and all associated info. See &lt;code&gt;GetCall&lt;/code&gt;
                    to return just a single call action by id. &lt;/p&gt;</ann:description>
            </documentation>
            <input message="tns:QueryCalls" name="QueryCalls"/>
            <output message="tns:CallQueryResult" name="CallQueryResult"/>
            <fault message="tns:ServiceFault" name="Fault"/>
        </operation>
        <operation name="GetCall">
            <documentation>
                <ann:restOperation path="{Id}"/>
                <ann:summary>Gets a call by ID</ann:summary>
                <ann:description>&lt;p&gt;Return individual call action. See &lt;code&gt;QueryCalls&lt;/code&gt; to
                    return a list of call actions and determine individual callIds. &lt;/p&gt; &lt;p&gt;General usage is
                    to start a call campaign using &lt;code&gt;SendCall&lt;/code&gt;, then to pass returned broadcastId
                    to &lt;code&gt;QueryCalls&lt;/code&gt; to determine callIds of call actions created. This &lt;code&gt;GetCall&lt;/code&gt;
                    can then be called with unique callId to determine info and state of call action.
                    &lt;/p&gt;</ann:description>
            </documentation>
            <input message="tns:GetCall" name="GetCall"/>
            <output message="tns:Call" name="Call"/>
            <fault message="tns:ServiceFault" name="Fault"/>
        </operation>
        <operation name="CreateSound">
            <documentation>
                <ann:restOperation path="sound"/>
                <ann:summary>Creates a new CallFire-hosted sound for use in calls.</ann:summary>
                <ann:description>&lt;p&gt;There are two ways to create a sound: (1) uploading a pre-recorded WAV or MP3,
                    or (2) initiating a call to record a sound over the phone. &lt;/p&gt; &lt;p&gt;Duplicate uploads are
                    not allowed. If a duplicate sound data are provided, a new sound is not created. Instead, the ID of
                    the previous sound is returned. &lt;/p&gt; &lt;p&gt;Recording a sound over the phone works by first
                    creating a sound asset using the RecordingCall option, then call the ToNumber to record live voice
                    as sound. If sound is created using RecordingCall then need to wait for sound to be active by
                    calling &lt;code&gt;GetSoundMeta&lt;/code&gt; until Status = 'ACTIVE'. &lt;/p&gt; &lt;p&gt;Use the
                    returned soundId in a subsequent &lt;code&gt;SendCall&lt;/code&gt;
                    request.&lt;/p&gt;</ann:description>
            </documentation>
            <input message="tns:CreateSound" name="CreateSound"/>
            <output message="tns:CreatedId" name="SoundMetaId"/>
            <fault message="tns:ServiceFault" name="Fault"/>
        </operation>
        <operation name="QuerySoundMeta">
            <documentation>
                <ann:restOperation path="sound"/>
                <ann:summary>Lists sounds available for use in calls.</ann:summary>
                <ann:description>&lt;p&gt;Return list of sound meta info that includes id, status, name, length, etc...
                    This operation only returns meta info, not the actual sound data. The raw binary sound data can be
                    obtained from the &lt;code&gt;GetSoundData&lt;/code&gt;. &lt;/p&gt;</ann:description>
            </documentation>
            <input message="tns:QuerySoundMeta" name="QuerySoundMeta"/>
            <output message="tns:SoundMetaQueryResult" name="SoundMetaQueryResult"/>
            <fault message="tns:ServiceFault" name="Fault"/>
        </operation>
        <operation name="GetSoundMeta">
            <documentation>
                <ann:restOperation path="sound/{Id}"/>
                <ann:summary>Gets metadata for a sound for use in calls</ann:summary>
                <ann:description>&lt;p&gt;Return sound meta info for specified sound that includes id, status, name,
                    length, etc... This operation only returns meta info, not the actual sound data. The raw binary
                    sound data can be obtained from the &lt;code&gt;GetSoundData&lt;/code&gt;.
                    &lt;/p&gt;</ann:description>
            </documentation>
            <input message="tns:GetSoundMeta" name="GetSoundMeta"/>
            <output message="tns:SoundMeta" name="SoundMeta"/>
            <fault message="tns:ServiceFault" name="Fault"/>
        </operation>
        <operation name="GetSoundData">
            <documentation>
                <ann:summary>Gets binary data for a sound that's available for use in calls</ann:summary>
                <ann:description>&lt;p&gt;Returns the raw binary data in specified format from specified sound. If no
                    format is specified will return MP3 data. &lt;/p&gt;</ann:description>
            </documentation>
            <input message="tns:GetSoundData" name="GetSoundData"/>
            <output message="tns:SoundData" name="SoundData"/>
            <fault message="tns:ServiceFault" name="Fault"/>
        </operation>
        <operation name="GetRecordingData">
            <documentation>
                <ann:summary>Gets the binary data for a sound recorded from a past call</ann:summary>
                <ann:description>&lt;p&gt;Recording from calls can be retrieved here using CallId / Name pair. Sounds
                    may be given a name, unique within a call, in the IVR using the record tag and varname attribute.
                    This allows them to be requested by name in this API. &lt;/p&gt;</ann:description>
            </documentation>
            <input message="tns:GetRecordingData" name="GetRecordingData"/>
            <output message="tns:RecordingData" name="RecordingData"/>
            <fault message="tns:ServiceFault" name="Fault"/>
        </operation>
    </portType>
    <!-- Contact Service -->
    <message name="GetContact">
        <part element="svc:GetContact" name="Request"/>
    </message>
    <message name="Contact">
        <part element="data:Contact" name="Request"/>
    </message>
    <message name="GetContactHistory">
        <part element="svc:GetContactHistory" name="Request"/>
    </message>
    <message name="ContactHistory">
        <part element="data:ContactHistory" name="Request"/>
    </message>
    <message name="QueryContacts">
        <part element="svc:QueryContacts" name="Request"/>
    </message>
    <message name="ContactQueryResult">
        <part element="svc:ContactQueryResult" name="Request"/>
    </message>
    <message name="UpdateContacts">
        <part element="svc:UpdateContacts" name="Request"/>
    </message>
    <message name="RemoveContacts">
        <part element="svc:RemoveContacts" name="Request"/>
    </message>
    <message name="QueryContactLists">
        <part element="svc:QueryContactLists" name="Request"/>
    </message>
    <message name="ContactListQueryResult">
        <part element="svc:ContactListQueryResult" name="Request"/>
    </message>
    <message name="CreateContactList">
        <part element="svc:CreateContactList" name="Request"/>
    </message>
    <message name="DeleteContactList">
        <part element="svc:DeleteContactList" name="Request"/>
    </message>
    <message name="AddContactsToList">
        <part element="svc:AddContactsToList" name="Request"/>
    </message>
    <message name="RemoveContactsFromList">
        <part element="svc:RemoveContactsFromList" name="Request"/>
    </message>
    <portType name="ContactServicePortType">
        <documentation>
            <ann:restOperation path="contact"/>
            <ann:summary>Provides operations for managing contact lists</ann:summary>
            <ann:description>&lt;a href="https://www.callfire.com/help/docs/getting-started/managing-contacts"&gt;Managing
                Contacts&lt;/a&gt;</ann:description>
            <ann:link>https://www.callfire.com/help/docs/getting-started/managing-contacts</ann:link>
        </documentation>
        <!-- contact operations -->
        <operation name="QueryContacts">
            <documentation>
                <ann:docGeneration hideDoc="true"/>
                <ann:summary>Lists existing contacts</ann:summary>
                <ann:description>Operation Not Implemented, Coming Soon.</ann:description>
                <ann:link>https://www.callfire.com/help/docs/getting-started/managing-contacts/contact-lists</ann:link>
            </documentation>
            <input message="tns:QueryContacts" name="QueryContacts"/>
            <output message="tns:ContactQueryResult" name="ContactQueryResult"/>
            <fault message="tns:ServiceFault" name="Fault"/>
        </operation>
        <operation name="UpdateContacts">
            <documentation>
                <ann:docGeneration hideDoc="true"/>
                <ann:summary>Adds and/or updates existing contacts</ann:summary>
                <ann:description>Operation Not Implemented, Coming Soon.</ann:description>
                <ann:link>https://www.callfire.com/help/docs/getting-started/managing-contacts/contact-lists</ann:link>
            </documentation>
            <input message="tns:UpdateContacts" name="UpdateContacts"/>
            <output message="tns:Empty" name="UpdateContactsResponse"/>
            <fault message="tns:ServiceFault" name="Fault"/>
        </operation>
        <operation name="RemoveContacts">
            <documentation>
                <ann:docGeneration hideDoc="true"/>
                <ann:summary>Removes contacts</ann:summary>
                <ann:description>Operation Not Implemented, Coming Soon.</ann:description>
            </documentation>
            <input message="tns:RemoveContacts" name="RemoveContacts"/>
            <output message="tns:Empty" name="RemoveContactsResponse"/>
            <fault message="tns:ServiceFault" name="Fault"/>
        </operation>
        <operation name="GetContact">
            <documentation>
                <ann:docGeneration hideDoc="true"/>
                <ann:restOperation path="{Id}"/>
                <ann:summary>Gets the contact by ID</ann:summary>
                <ann:description>Operation Not Implemented, Coming Soon.</ann:description>
            </documentation>
            <input message="tns:GetContact" name="GetContact"/>
            <output message="tns:Contact" name="Contact"/>
            <fault message="tns:ServiceFault" name="Fault"/>
        </operation>
        <operation name="GetContactHistory">
            <documentation>
                <ann:docGeneration hideDoc="true"/>
                <ann:restOperation path="{Id}/history"/>
                <ann:summary>Gets a contact's history by contact ID</ann:summary>
                <ann:description>Operation Not Implemented, Coming Soon.</ann:description>
            </documentation>
            <input message="tns:GetContactHistory" name="GetContactHistory"/>
            <output message="tns:ContactHistory" name="ContactHistory"/>
            <fault message="tns:ServiceFault" name="Fault"/>
        </operation>
        <!-- contact list operations -->
        <operation name="CreateContactList">
            <documentation>
                <ann:restOperation path="list"/>
                <ann:summary>Create new contact list and add to account</ann:summary>
                <ann:description>&lt;p&gt;Add contact list to account using 1 of 4 inputs: list of contacts, numbers
                    string, list of contactIds, or csv file containing contacts or numbers. If more then one
                    ContactSource specified then only load from 1 source with precedence as listed above. &lt;/p&gt;
                    &lt;p&gt;On import contact lists go through seven system safeguards that check the accuracy of the
                    list. For example, our system checks if a number is formatted correctly, is invalid, is duplicated
                    in another contact list, or is on your Do Not Contact list. API calls have their default validation
                    error resolutions set differently then the defaults set on the CallFire web site under Settings |
                    List Validation. The API validation defaults are: &lt;table&gt; &lt;tr&gt;&lt;td&gt;LIST_COLUMNS_UNMAPPED&lt;/td&gt;&lt;td&gt;Resolution
                    USE_DEFAULT_COLUMNS&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;LIST_HAS_DUPLICATE_NUMBERS&lt;/td&gt;&lt;td&gt;Resolution
                    SCRUB&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;LIST_HAS_DNC_CONTACTS&lt;/td&gt;&lt;td&gt;Resolution
                    SCRUB&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;LIST_HAS_CONTACT_CONFLICTS&lt;/td&gt;&lt;td&gt;Resolution
                    MERGE&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;LIST_HAS_INVALID_NUMBERS&lt;/td&gt;&lt;td&gt;Resolution
                    SCRUB&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; &lt;/p&gt;</ann:description>
                <ann:link>https://www.callfire.com/help/docs/getting-started/managing-contacts/contact-lists</ann:link>
            </documentation>
            <input message="tns:CreateContactList" name="CreateContactList"/>
            <output message="tns:CreatedId" name="ContactListId"/>
            <fault message="tns:ServiceFault" name="Fault"/>
        </operation>
        <operation name="QueryContactLists">
            <documentation>
                <ann:docGeneration hideDoc="true"/>
                <ann:restOperation path="list"/>
                <ann:summary>Lists existing contact lists</ann:summary>
                <ann:description>Operation Not Implemented, Coming Soon.</ann:description>
            </documentation>
            <input message="tns:QueryContactLists" name="QueryContactLists"/>
            <output message="tns:ContactListQueryResult" name="ContactListQueryResult"/>
            <fault message="tns:ServiceFault" name="Fault"/>
        </operation>
        <operation name="DeleteContactList">
            <documentation>
                <ann:docGeneration hideDoc="true"/>
                <ann:restOperation path="list/{Id}"/>
                <ann:summary>Deletes a contact list by ID</ann:summary>
                <ann:description>Operation Not Implemented, Coming Soon.</ann:description>
            </documentation>
            <input message="tns:DeleteContactList" name="DeleteContactList"/>
            <output message="tns:Empty" name="DeleteContactListResponse"/>
            <fault message="tns:ServiceFault" name="Fault"/>
        </operation>
        <operation name="AddContactsToList">
            <documentation>
                <ann:restOperation path="list/{Id}/add"/>
                <ann:summary>Adds contacts to an existing list</ann:summary>
                <ann:description>&lt;p&gt;See CreateContactList. Currently only supports adding ContactSource numbers,
                    not contact lists, contactId lists, or csv files. &lt;/p&gt;</ann:description>
            </documentation>
            <input message="tns:AddContactsToList" name="AddContactsToList"/>
            <output message="tns:Empty" name="AddContactsToListResponse"/>
            <fault message="tns:ServiceFault" name="Fault"/>
        </operation>
        <operation name="RemoveContactsFromList">
            <documentation>
                <ann:restOperation path="list/{Id}/remove"/>
                <ann:summary>Removes contacts from a list without deleting the contacts</ann:summary>
                <ann:description>&lt;p&gt;Currently only supports removing contacts by ContactSource numbers, not
                    contact lists, contactId lists, or csv files. Just specify the contact list ID and the numbers to
                    remove from list. &lt;/p&gt;</ann:description>
            </documentation>
            <input message="tns:RemoveContactsFromList" name="RemoveContactsFromList"/>
            <output message="tns:Empty" name="RemoveContactsFromListResponse"/>
            <fault message="tns:ServiceFault" name="Fault"/>
        </operation>
    </portType>
    <!-- Number Service -->
    <message name="GetNumber">
        <part element="svc:GetNumber" name="Request"/>
    </message>
    <message name="Number">
        <part element="data:Number" name="Response"/>
    </message>
    <message name="QueryRegions">
        <part element="svc:QueryRegions" name="Request"/>
    </message>
    <message name="RegionQueryResult">
        <part element="svc:RegionQueryResult" name="Response"/>
    </message>
    <message name="QueryNumbers">
        <part element="svc:QueryNumbers" name="Request"/>
    </message>
    <message name="NumberQueryResult">
        <part element="svc:NumberQueryResult" name="Response"/>
    </message>
    <message name="SearchAvailableNumbers">
        <part element="svc:SearchAvailableNumbers" name="Request"/>
    </message>
    <message name="ConfigureNumber">
        <part element="svc:ConfigureNumber" name="Request"/>
    </message>
    <message name="QueryKeywords">
        <part element="svc:QueryKeywords" name="Request"/>
    </message>
    <message name="KeywordQueryResult">
        <part element="svc:KeywordQueryResult" name="Response"/>
    </message>
    <message name="SearchAvailableKeywords">
        <part element="svc:SearchAvailableKeywords" name="Request"/>
    </message>
    <message name="CreateNumberOrder">
        <part element="svc:CreateNumberOrder" name="Request"/>
    </message>
    <message name="GetNumberOrder">
        <part element="svc:GetNumberOrder" name="Request"/>
    </message>
    <message name="NumberOrder">
        <part element="data:NumberOrder" name="Request"/>
    </message>
    <message name="Release">
        <part element="svc:Release" name="Request"/>
    </message>
    <portType name="NumberServicePortType">
        <documentation>
            <ann:restOperation path="number"/>
            <ann:summary>Operations for buying and configuring numbers and keywords.</ann:summary>
            <ann:description>&lt;p&gt;Find and provision toll-free and local numbers and keywords using the number
                service. To aquire a number or keyword first search for available inventory using either &lt;code&gt;SearchAvailableNumbers&lt;/code&gt;
                or &lt;code&gt;SearchAvailableKeywords&lt;/code&gt;. Then provision that asset using the &lt;code&gt;CreateNumberOrder&lt;/code&gt;
                operation. &lt;/p&gt;</ann:description>
            <ann:link>https://www.callfire.com/help/docs/keywords</ann:link>
        </documentation>
        <operation name="QueryRegions">
            <documentation>
                <ann:restOperation path="regions"/>
                <ann:summary>Queries regions for use in subsequent searches and purchase requests</ann:summary>
                <ann:description>&lt;p&gt;Use a know subset of info on a region to query for the full set of info on a
                    region. Example, if you know the city you can query for phone number prefixes, rate-centers, etc...
                    associated with that city. &lt;/p&gt;</ann:description>
            </documentation>
            <input message="tns:QueryRegions" name="Request"/>
            <output message="tns:RegionQueryResult" name="Response"/>
            <fault message="tns:ServiceFault" name="Fault"/>
        </operation>
        <!-- phone number operations -->
        <operation name="QueryNumbers">
            <documentation>
                <ann:summary>Lists numbers owned by your account</ann:summary>
                <ann:description>&lt;p&gt;Search for numbers already purchased and in your account by region info such
                    as prefix, city, state, zipcode, rate center, etc... Returns info on the numbers in your account
                    such as status, lease info, configuration, etc... &lt;/p&gt;</ann:description>
            </documentation>
            <input message="tns:QueryNumbers" name="QueryNumbers"/>
            <output message="tns:NumberQueryResult" name="NumberQueryResult"/>
            <fault message="tns:ServiceFault" name="Fault"/>
        </operation>
        <operation name="GetNumber">
            <documentation>
                <ann:restOperation path="{Number}"/>
                <ann:summary>Get information about a single number owned by your account</ann:summary>
                <ann:description>&lt;p&gt;Select number, using 11 digit E.164 format, already purchased and in your
                    account. Returns info on the number in your account such as status, lease info, configuration,
                    etc... &lt;/p&gt;</ann:description>
            </documentation>
            <input message="tns:GetNumber" name="GetNumber"/>
            <output message="tns:Number" name="Number"/>
            <fault message="tns:ServiceFault" name="Fault"/>
        </operation>
        <operation name="ConfigureNumber">
            <documentation>
                <ann:restOperation path="{Number}"/>
                <ann:summary>Configure a number owned by your account</ann:summary>
                <ann:description>&lt;p&gt;Update number configuration, such as ENABLE / DISABLE or turn call recording
                    on, using 11 diget E.164 format to select number. No response is returned.
                    &lt;/p&gt;</ann:description>
            </documentation>
            <input message="tns:ConfigureNumber" name="ConfigureNumber"/>
            <output message="tns:Empty" name="ConfigureNumberResponse"/>
            <fault message="tns:ServiceFault" name="Fault"/>
        </operation>
        <operation name="SearchAvailableNumbers">
            <documentation>
                <ann:restOperation path="search"/>
                <ann:summary>Search for new numbers that are available for purchase</ann:summary>
                <ann:description>&lt;p&gt;Find numbers available for purchase using either TollFree = true or by region
                    info, such as prefix, city, zipcode, etc... The max count of numbers to return must also be
                    specified. &lt;/p&gt;</ann:description>
            </documentation>
            <input message="tns:SearchAvailableNumbers" name="SearchAvailableNumbers"/>
            <output message="tns:NumberQueryResult" name="AvailableNumbers"/>
            <fault message="tns:ServiceFault" name="Fault"/>
        </operation>
        <!-- keyword operations -->
        <operation name="QueryKeywords">
            <documentation>
                <ann:restOperation path="keyword"/>
                <ann:summary>Lists keywords owned by your account</ann:summary>
                <ann:description>&lt;p&gt;Get info such as status, lease dates, etc... on keywords owned by your
                    account. &lt;/p&gt;</ann:description>
            </documentation>
            <input message="tns:QueryKeywords" name="QueryKeywords"/>
            <output message="tns:KeywordQueryResult" name="KeywordQueryResult"/>
            <fault message="tns:ServiceFault" name="Fault"/>
        </operation>
        <operation name="SearchAvailableKeywords">
            <documentation>
                <ann:restOperation path="keyword/search"/>
                <ann:summary>Search for keywords available for purchase</ann:summary>
                <ann:description>&lt;p&gt;Supply list of keywords to see if they are available for purchase. If keyword
                    is available for purchase it will be returned in result. If not available then it will not be
                    returned in result. &lt;/p&gt; &lt;p&gt;Once available keywords are found they can be purchase using
                    &lt;code&gt;CreateNumberOrder&lt;/code&gt;</ann:description>
            </documentation>
            <input message="tns:SearchAvailableKeywords" name="SearchAvailableKeywords"/>
            <output message="tns:KeywordQueryResult" name="AvailableKeywordList"/>
            <fault message="tns:ServiceFault" name="Fault"/>
        </operation>
        <operation name="CreateNumberOrder">
            <documentation>
                <ann:restOperation path="order"/>
                <ann:summary>Order new numbers and/or keywords</ann:summary>
                <ann:description>&lt;p&gt;Purchase numbers and keywords by creating a number order that includes a list
                    of numbers, list of keywords, region info, or specifying toll-free. OrderId is returned from
                    request. &lt;p&gt;Creating a number order is an asynchronous process. The returned orderId can be
                    used in a &lt;code&gt;GetNumberOrder&lt;/code&gt; request to see the status of the order. However,
                    there is no guarantee the order will be finished by the time &lt;code&gt;GetNumberOrder&lt;/code&gt;
                    is called therefore the &lt;code&gt;GetNumberOrder&lt;/code&gt; operation must be polled (no more
                    than once a second) untill the order is in a terminal state (FINISHED or ERRORED). &lt;/p&gt; &lt;p&gt;The
                    recommended way to determine if an order is finished is not to poll but to use a &lt;a
                    href="https://www.callfire.com/api-documentation/postback-guide"&gt;Postback&lt;/a&gt;. See &lt;code&gt;SubscriptionService&lt;/code&gt;
                    for information on registering a postback using subscriptions.
                </ann:description>
                <ann:link>https://www.callfire.com/help/docs/keywords/purchasing-keyword</ann:link>
                <ann:link>https://www.callfire.com/api-documentation/postback-guide</ann:link>
            </documentation>
            <input message="tns:CreateNumberOrder" name="CreateNumberOrder"/>
            <output message="tns:CreatedId" name="NumberOrderId"/>
            <fault message="tns:ServiceFault" name="Fault"/>
        </operation>
        <operation name="GetNumberOrder">
            <documentation>
                <ann:restOperation path="order/{Id}"/>
                <ann:summary>Get the status and results of a previous order</ann:summary>
                <ann:description>&lt;p&gt;Returns information on the order status, cost, and assets aquired.&lt;/p&gt;
                    &lt;p&gt;Since &lt;code&gt;CreateNumberOrder&lt;/code&gt; is an asynchronous process this &lt;code&gt;GetNumberOrder&lt;/code&gt;
                    operation may need to be polled for up to 20 seconds at a rate of no more than once a second to
                    determine when the order is in a terminal state of FINISHED or ERRORED. Order will be in
                    'PROCESSING' status untill finished. &lt;/p&gt;</ann:description>
            </documentation>
            <input message="tns:GetNumberOrder" name="GetNumberOrder"/>
            <output message="tns:NumberOrder" name="NumberOrder"/>
            <fault message="tns:ServiceFault" name="Fault"/>
        </operation>
        <operation name="Release">
            <documentation>
                <ann:restOperation method="PUT" path="release"/>
                <ann:summary>Disable auto-renew for a number or keyword</ann:summary>
                <ann:description>&lt;p&gt;CallFire's system automatically "renews" your numbers and keywords each month
                    and bills you accordingly. When you no longer need a number or keyword, you can easily 'Release' it
                    and stop your recurring monthly charge. &lt;/p&gt; &lt;p&gt;Once you release a keyword, you will not
                    be able to repurchase it for a month after the release becomes effective. For example, if your
                    keyword is slated to auto-renew for another month on April 29th, and you release it on April 15th,
                    you will still be able to use it until April 29th. However, you will not be able to repurchase it
                    until May 29th. Therefore, please be sure of your decision before releasing.
                    &lt;/p&gt;</ann:description>
                <ann:link>https://www.callfire.com/help/docs/keywords/releasing-keyword</ann:link>
            </documentation>
            <input message="tns:Release" name="Release"/>
            <output message="tns:Empty" name="ReleaseResponse"/>
            <fault message="tns:ServiceFault" name="Fault"/>
        </operation>
    </portType>
    <!-- Label Service -->
    <message name="DeleteLabel">
        <part element="svc:DeleteLabel" name="DeleteLabel"/>
    </message>
    <message name="QueryLabels">
        <part element="svc:QueryLabels" name="QueryLabels"/>
    </message>
    <message name="QueryLabelsResult">
        <part element="svc:LabelQueryResult" name="Response"/>
    </message>
    <message name="LabelBroadcast">
        <part element="svc:LabelBroadcast" name="LabelBroadcast"/>
    </message>
    <message name="UnlabelBroadcast">
        <part element="svc:UnlabelBroadcast" name="UnlabelBroadcast"/>
    </message>
    <message name="LabelNumber">
        <part element="svc:LabelNumber" name="LabelNumber"/>
    </message>
    <message name="UnlabelNumber">
        <part element="svc:UnlabelNumber" name="UnlabelNumber"/>
    </message>
    <portType name="LabelServicePortType">
        <documentation>
            <ann:restOperation path="label"/>
            <ann:summary>Operations for labeling and querying objects by label</ann:summary>
            <ann:description>&lt;p&gt;Labels allow you to group broadcasts, numbers, calls and texts into groups that
                make sense for your application. &lt;/p&gt;</ann:description>
        </documentation>
        <operation name="DeleteLabel">
            <documentation>
                <ann:summary>Removes a label from all labeled objects and deletes it</ann:summary>
            </documentation>
            <input message="tns:DeleteLabel" name="Delete"/>
            <output message="tns:Empty" name="DeleteResponse"/>
            <fault message="tns:ServiceFault" name="Fault"/>
        </operation>
        <operation name="QueryLabels">
            <documentation>
                <ann:summary>Returns all defined labels</ann:summary>
            </documentation>
            <input message="tns:QueryLabels" name="Query"/>
            <output message="tns:QueryLabelsResult" name="QueryResult"/>
            <fault message="tns:ServiceFault" name="Fault"/>
        </operation>
        <operation name="LabelBroadcast">
            <documentation>
                <ann:restOperation method="POST" path="broadcast/{Id}"/>
                <ann:summary>Adds a label to a broadcast, creating the label if it doesn't already exist</ann:summary>
            </documentation>
            <input message="tns:LabelBroadcast" name="LabelBroadcast"/>
            <output message="tns:Empty" name="Result"/>
            <fault message="tns:ServiceFault" name="Fault"/>
        </operation>
        <operation name="UnlabelBroadcast">
            <documentation>
                <ann:restOperation method="DELETE" path="broadcast/{Id}"/>
                <ann:summary>Removes a label from a single broadcast</ann:summary>
            </documentation>
            <input message="tns:UnlabelBroadcast" name="UnlabelBroadcast"/>
            <output message="tns:Empty" name="Result"/>
            <fault message="tns:ServiceFault" name="Fault"/>
        </operation>
        <operation name="LabelNumber">
            <documentation>
                <ann:restOperation method="POST" path="number/{Number}"/>
                <ann:summary>Adds a label to a single number</ann:summary>
            </documentation>
            <input message="tns:LabelNumber" name="LabelNumber"/>
            <output message="tns:Empty" name="Result"/>
            <fault message="tns:ServiceFault" name="Fault"/>
        </operation>
        <operation name="UnlabelNumber">
            <documentation>
                <ann:restOperation method="DELETE" path="number/{Number}"/>
                <ann:summary>Removes a label from a single number</ann:summary>
            </documentation>
            <input message="tns:UnlabelNumber" name="UnlabelNumber"/>
            <output message="tns:Empty" name="Result"/>
            <fault message="tns:ServiceFault" name="Fault"/>
        </operation>
    </portType>
</definitions>